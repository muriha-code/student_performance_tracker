from pathlib import Path

def letter_grade(score):
    """Konversi nilai numerik ke huruf A..E (aturan tugas)."""
    try:
        s = float(score)
    except Exception:
        s = 0.0
    if s >= 85:
        return "A"
    if s >= 75:
        return "B"
    if s >= 65:
        return "C"
    if s >= 50:
        return "D"
    return "E"

def build_markdown_report(records):
    """
    Bangun konten markdown secara manual.
    records harus list of dict dengan kunci: student_id, name, attendance_rate, final_score
    """
    lines = []
    lines.append("# Rekap Nilai Mahasiswa")
    lines.append("")
    lines.append("| NIM | Nama | Hadir (%) | Nilai Akhir | Predikat |")
    lines.append("|---|---|---:|---:|:---:|")
    # tambahkan baris untuk setiap record
    for r in records:
        sid = r.get("student_id", "")
        name = r.get("name", "")
        try:
            att = float(r.get("attendance_rate", 0.0) or 0.0)
        except Exception:
            att = 0.0
        try:
            score = float(r.get("final_score", 0.0) or 0.0)
        except Exception:
            score = 0.0
        pred = letter_grade(score)
        lines.append("| {} | {} | {:.2f} | {:.2f} | {} |".format(sid, name, att, score, pred))
    lines.append("")
    lines.append("Generated by student_performance_tracker")
    # gabungkan
    md = "\n".join(lines)
    return md

def save_text(path, content):
    """Simpan content (string) ke file path (buat file jika belum ada)."""
    p = Path(path)
    p.parent.mkdir(parents=True, exist_ok=True)
    p.write_text(content, encoding="utf-8")

def build_html_report(records):
    """Bangun HTML sederhana. Warna latar berdasarkan predikat (manual)."""
    def color_for(letter):
        if letter == "A":
            return "#e6ffe6"
        if letter == "B":
            return "#e6f0ff"
        if letter == "C":
            return "#fff4e6"
        if letter == "D":
            return "#ffe6e6"
        if letter == "E":
            return "#ffd6d6"
        return "#ffffff"

    rows_html = []
    for r in records:
        sid = r.get("student_id", "")
        name = r.get("name", "")
        try:
            att = float(r.get("attendance_rate", 0.0) or 0.0)
        except Exception:
            att = 0.0
        try:
            score = float(r.get("final_score", 0.0) or 0.0)
        except Exception:
            score = 0.0
        letter = letter_grade(score)
        bg = color_for(letter)
        # buat baris HTML manual
        row_html = (
            "<tr style=\"background:{}\">".format(bg) +
            "<td>{}</td>".format(sid) +
            "<td>{}</td>".format(name) +
            "<td style=\"text-align:right\">{:.2f}</td>".format(att) +
            "<td style=\"text-align:right\">{:.2f}</td>".format(score) +
            "<td style=\"text-align:center\">{}</td>".format(letter) +
            "</tr>"
        )
        rows_html.append(row_html)

    html = (
        "<!doctype html><html lang=\"id\"><head><meta charset=\"utf-8\"/>"
        "<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"/>"
        "<title>Rekap Nilai Mahasiswa</title>"
        "<style>body{font-family:Arial,Helvetica,sans-serif;padding:20px;}table{border-collapse:collapse;width:100%;}"
        "th,td{border:1px solid #ccc;padding:8px 10px;}th{background:#f7f7f7;text-align:left;}</style>"
        "</head><body>"
        "<h1>Rekap Nilai Mahasiswa</h1>"
        "<table><thead>"
        "<tr><th>NIM</th><th>Nama</th><th style=\"text-align:right\">Hadir (%)</th><th style=\"text-align:right\">Nilai Akhir</th><th style=\"text-align:center\">Predikat</th></tr>"
        "</thead><tbody>"
        + "\n".join(rows_html) +
        "</tbody></table>"
        "<p style=\"margin-top:12px;color:#666\">Generated by student_performance_tracker</p>"
        "</body></html>"
    )
    return html
